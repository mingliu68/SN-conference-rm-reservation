<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_776893_conferenc.Reservation_Script_Include</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>Reservation_Script_Include</name>
        <script><![CDATA[var Reservation_Script_Include = Class.create();
Reservation_Script_Include.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	
	getRoomDisplayName: function() {
		var room = new GlideRecord('x_776893_conferenc_conference_rooms');
		room.get(this.getParameter('sysparm_sysId'));
		gs.addInfoMessage("room name: " + room.name );
		return room.name + '';
	},
	
	getDuration: function() {
		var startTime = new GlideDateTime(this.getParameter('sysparm_startTime'));
		var endTime = new GlideDateTime(this.getParameter('sysparm_endTime'));
		var durationCalculation = GlideDateTime.subtract(startTime, endTime);
		return durationCalculation.getDisplayValue();
	},
	
	getAvailableRooms: function() {
		var rooms = [];
		var rms = new GlideRecord('x_776893_conferenc_conference_rooms');
		rms.query();
		
		while (rms.next()) {
			rooms.push({"room":rms.getValue('name') , "sysId":rms.getValue('sys_id')});
		}
		
		var recordSysId = this.getParameter('sysparm_recordSysId');
		var startTime = new GlideDateTime(this.getParameter('sysparm_startTime'));
		/*
		var offset = Math.abs(startTime.getTZOffset());
		startTime.add(offset);
		*/
		var offset = startTime.getTZOffset();
		startTime.subtract(offset);
		var endTime = new GlideDateTime(this.getParameter('sysparm_endTime'));
		/*
		endTime.add(offset);
		*/
		endTime.subtract(offset);
		var reservations = new GlideRecord('x_776893_conferenc_room_reservations');
		
		reservations.addQuery('u_active',true);
		reservations.addQuery('u_end_time','>=',startTime.toString());
		reservations.addQuery('start_time','<=',endTime.toString());
		reservations.query();
		
		gs.addInfoMessage("Number of Available Rooms before While Loop: " + rooms.length);
		
		while(reservations.next()){
			
			var roomName = reservations.u_conference_room.name;
			if (rooms.length <= 0) return;
			var roomId = reservations.u_conference_room.sys_id.toString();
			
			if(reservations.sys_id != recordSysId) {
				removeByAtt(rooms, roomId);
			}
		}
		
		function removeByAtt(arr, value) {					
			var i = arr.length;
			while(i--) {
				if(arr[i].sysId == value) {	
					gs.addInfoMessage("While Loop removed room: " + arr[i].room + ", remaining rooms: " + rooms.length);		
					arr.splice(i,1);		
				}
			}
		}
		
		gs.addInfoMessage("Number of Available Rooms after While Loop: " + rooms.length);
		if (rooms.length == 0) {
			gs.addInfoMessage("There are no conference room available for the indicated time frame.");
		}
		var answer = JSON.stringify(rooms);
		return answer;
	},

    type: 'Reservation_Script_Include'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-03-24 01:50:19</sys_created_on>
        <sys_id>b11ce2e32f96011067ed24c62799b69f</sys_id>
        <sys_mod_count>168</sys_mod_count>
        <sys_name>Reservation_Script_Include</sys_name>
        <sys_package display_value="Conference Room Reservation" source="x_776893_conferenc">88a4d66b2f16011067ed24c62799b6e8</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Conference Room Reservation">88a4d66b2f16011067ed24c62799b6e8</sys_scope>
        <sys_update_name>sys_script_include_b11ce2e32f96011067ed24c62799b69f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-04-23 21:36:09</sys_updated_on>
    </sys_script_include>
</record_update>
